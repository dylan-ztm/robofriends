{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.07de7e60.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const { name, email, id } = props; //Use destructuring to use simple variables\r\n                                       //made from props object.\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img  alt='robot friend' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}//end of Card\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n     return (\r\n        <div>\r\n             {\r\n                 robots.map( (user,i) => {\r\n                    return (\r\n                        <Card \r\n                        key={i} \r\n                        id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        email={robots[i].email} \r\n                        />\r\n                    );\r\n                }//end of robots.map\r\n                )\r\n             }           \r\n        </div>\r\n    );\r\n} //end of CardList\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='Search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    ); //closing bracket for SearchBox return statement\r\n} //end of SearchBox\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => { \r\n    return (\r\n        <div style={ {overflowY: 'scroll', border: '2px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n} //end of Scroll\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\n//import ErrorBoundry from '../components/ErrorBoundry'; *Not being used*\r\nimport './App.css';\r\n\r\n//State Management section\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n} //end mapStateToProps\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n} //end mapDispatchToProps\r\n\r\n\r\nclass App extends Component { //Component is from React.Component.  see \"import React\" above.\r\n    componentDidMount() { \r\n        this.props.onRequestRobots();\r\n        } //end of componentDidMount\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        }); //end of robots.filter\r\n        \r\n        return isPending ?\r\n                <h1>Loading</h1> :\r\n                (        \r\n                    <div className='tc'>\r\n                        <h1 className='f1'>RoboFriends</h1>\r\n                        <SearchBox searchChange={onSearchChange}/>\r\n                        <Scroll>\r\n                            <CardList robots={filteredRobots} />\r\n                        </Scroll>\r\n                    </div>\r\n                ); //closing bracket for render's return statement\r\n    } //end of render\r\n} //end of class App\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n        CHANGE_SEARCH_FIELD,\r\n        REQUEST_ROBOTS_PENDING,\r\n        REQUEST_ROBOTS_SUCCESS,\r\n        REQUEST_ROBOTS_FAILED \r\n} from './constants.js';\r\n\r\n// setSearchField\r\nexport const setSearchField = (text) => ({\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text //text the user entered in the Search field\r\n}); //end of setSearchField\r\n\r\n// requestRobots\r\nexport const requestRobots = () => (dispatch) => {\r\n        dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}));\r\n} //end of requestRobots","export const CHANGE_SEARCH_FIELD    = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED  = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED \r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\n// searchRobots reducer function\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    } //end switch\r\n} //end searchRobots\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n        default:\r\n            return state;\r\n    } //end switch\r\n} //end requestRobots","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'; //facilitates connection between redux and react\nimport { createStore, applyMiddleware, combineReducers } from 'redux'; //used to create redux state object\nimport { createLogger } from 'redux-logger'; //used to log redux activity\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers.js';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n            <Provider store={store}>\n                <App />\n            </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}